{"title":"Utils","markdown":{"yaml":{"format":{"html":{"toc":true,"toc-depth":3,"theme":"cosmo","number-sections":false,"output-file":"assignments.hw3.utils.html"}},"code-block-background":true,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"toc-title-numbers":false,"number-depth":0},"headingText":"Utils","containsRefs":false,"markdown":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw3.utils_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw3.utils_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw3.utils\n  (:require\n   [clojure.math.combinatorics :as combo]\n   [scicloj.kindly.v4.api :as kindly]\n   [scicloj.kindly.v4.kind :as kind]\n   (uncomplicate.neanderthal\n    [core :refer [mv]]\n    [linalg :refer [trf! tri!]]\n    [native :refer [dge dv]])))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(kind/md \"## Utils\")\n```\n:::\n\n\n\nFunctions from HW3\n\nQ2: Subset counting\n\n\n::: {.sourceClojure}\n```clojure\n(defn count-subsets [n]\n  (Math/pow 2 n))\n```\n:::\n\n\nQ3: Occupancy problem\n\n\n::: {.sourceClojure}\n```clojure\n(defn probability-one-cell-empty [n]\n  (/ (* n (Math/pow (dec n) (dec n)))\n     (Math/pow n n)))\n```\n:::\n\n\nQ4: Coin flipping game\n\n\n::: {.sourceClojure}\n```clojure\n(defn simulate-game []\n  (loop [player :A]\n    (if (= (rand-int 2) 0)                          ; 0 represents heads\n      player\n      (recur (if (= player :A) :B :A)))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn simulate-many-games [n]\n  (let [results (repeatedly n simulate-game)\n        a-wins (count (filter #(= % :A) results))]\n    (double (/ a-wins n))))\n```\n:::\n\n\nQ7: AI Error Distribution\n\n\n::: {.sourceClojure}\n```clojure\n(defn factorial [n]\n  (apply * (range 1 (inc n))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn stirling2 [n k]\n  (cond\n    (or (= k 0) (> k n)) 0\n    (or (= k 1) (= k n)) 1\n    :else (+ (* k (stirling2 (dec n) k))\n             (stirling2 (dec n) (dec k)))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn probability-all-circuits-receive-error []\n  (let [n 10                                            ; number of errors\n        k 8                                             ; number of circuits\n        total-ways (Math/pow k n)\n        favorable-ways (* (factorial k) (stirling2 n k))]\n    (/ favorable-ways total-ways)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn simulate-error-distribution []\n  (let [circuits (vec (repeat 8 0))]\n    (reduce (fn [acc _]\n              (update acc (rand-int 8) inc))\n            circuits\n            (range 10))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn all-circuits-have-error? [distribution]\n  (every? pos? distribution))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn monte-carlo-simulation [num-simulations]\n  (let [successes (atom 0)]\n    (doseq [_ (range num-simulations)]\n      (when (all-circuits-have-error? (simulate-error-distribution))\n        (swap! successes inc)))\n    (double (/ @successes num-simulations))))\n```\n:::\n\n\nHelper functions\n\n\n::: {.sourceClojure}\n```clojure\n(defn joint-probability\n  \"Helper function to calculate the joint probability of a subset of events.\"\n  [probs subset]\n  (reduce * (map #(nth probs %) subset)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn subsets\n  \"Generate all non-empty subsets of a set of indices.\"\n  [s]\n  (filter seq (combo/subsets s)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn power-set\n  \"Returns the power set of a given collection (set or vector).\"\n  [coll]\n  (set (map set (combo/subsets (seq coll)))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn probability-at-least-one\n  \"Calculate the probability of at least one event occurring given a collection of probabilities.\n       Uses the inclusion-exclusion principle for any number of events.\"\n  [probs]\n  (let [p-none (reduce * (map #(- 1 %) probs))]\n    (- 1 p-none)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn solve-probabilities [b1 b2]\n  (let [A (dge 2 2 [1 1\n                    3 -1]\n               {:layout :row})\n        b (dv [b1 b2])\n        LU (trf! A)\n        x (mv (tri! LU) b)]\n    x))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn nck\n  \"Calculates the binomial coefficient (n choose k) using iterative and recursive method.\"\n  [n k]\n  (if (or (< k 0) (> k n))\n    0\n    (let [k (min k (- n k))]\n      (loop [result 1N, i 0]\n        (if (= i k)\n          result\n          (recur\n           (/ (* result (- n i)) (inc i))\n           (inc i)))))))\n```\n:::\n\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div><pre><small><small>source: <a href=\"https://github.com/adabwana/f24-m6410-hw3/blob/master/src/assignments/hw3/utils.clj\">src/assignments/hw3/utils.clj</a></small></small></pre></div>\n```\n","srcMarkdownNoYaml":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw3.utils_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw3.utils_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw3.utils\n  (:require\n   [clojure.math.combinatorics :as combo]\n   [scicloj.kindly.v4.api :as kindly]\n   [scicloj.kindly.v4.kind :as kind]\n   (uncomplicate.neanderthal\n    [core :refer [mv]]\n    [linalg :refer [trf! tri!]]\n    [native :refer [dge dv]])))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(kind/md \"## Utils\")\n```\n:::\n\n\n## Utils\n\nFunctions from HW3\n\nQ2: Subset counting\n\n\n::: {.sourceClojure}\n```clojure\n(defn count-subsets [n]\n  (Math/pow 2 n))\n```\n:::\n\n\nQ3: Occupancy problem\n\n\n::: {.sourceClojure}\n```clojure\n(defn probability-one-cell-empty [n]\n  (/ (* n (Math/pow (dec n) (dec n)))\n     (Math/pow n n)))\n```\n:::\n\n\nQ4: Coin flipping game\n\n\n::: {.sourceClojure}\n```clojure\n(defn simulate-game []\n  (loop [player :A]\n    (if (= (rand-int 2) 0)                          ; 0 represents heads\n      player\n      (recur (if (= player :A) :B :A)))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn simulate-many-games [n]\n  (let [results (repeatedly n simulate-game)\n        a-wins (count (filter #(= % :A) results))]\n    (double (/ a-wins n))))\n```\n:::\n\n\nQ7: AI Error Distribution\n\n\n::: {.sourceClojure}\n```clojure\n(defn factorial [n]\n  (apply * (range 1 (inc n))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn stirling2 [n k]\n  (cond\n    (or (= k 0) (> k n)) 0\n    (or (= k 1) (= k n)) 1\n    :else (+ (* k (stirling2 (dec n) k))\n             (stirling2 (dec n) (dec k)))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn probability-all-circuits-receive-error []\n  (let [n 10                                            ; number of errors\n        k 8                                             ; number of circuits\n        total-ways (Math/pow k n)\n        favorable-ways (* (factorial k) (stirling2 n k))]\n    (/ favorable-ways total-ways)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn simulate-error-distribution []\n  (let [circuits (vec (repeat 8 0))]\n    (reduce (fn [acc _]\n              (update acc (rand-int 8) inc))\n            circuits\n            (range 10))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn all-circuits-have-error? [distribution]\n  (every? pos? distribution))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn monte-carlo-simulation [num-simulations]\n  (let [successes (atom 0)]\n    (doseq [_ (range num-simulations)]\n      (when (all-circuits-have-error? (simulate-error-distribution))\n        (swap! successes inc)))\n    (double (/ @successes num-simulations))))\n```\n:::\n\n\nHelper functions\n\n\n::: {.sourceClojure}\n```clojure\n(defn joint-probability\n  \"Helper function to calculate the joint probability of a subset of events.\"\n  [probs subset]\n  (reduce * (map #(nth probs %) subset)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn subsets\n  \"Generate all non-empty subsets of a set of indices.\"\n  [s]\n  (filter seq (combo/subsets s)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn power-set\n  \"Returns the power set of a given collection (set or vector).\"\n  [coll]\n  (set (map set (combo/subsets (seq coll)))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn probability-at-least-one\n  \"Calculate the probability of at least one event occurring given a collection of probabilities.\n       Uses the inclusion-exclusion principle for any number of events.\"\n  [probs]\n  (let [p-none (reduce * (map #(- 1 %) probs))]\n    (- 1 p-none)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn solve-probabilities [b1 b2]\n  (let [A (dge 2 2 [1 1\n                    3 -1]\n               {:layout :row})\n        b (dv [b1 b2])\n        LU (trf! A)\n        x (mv (tri! LU) b)]\n    x))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn nck\n  \"Calculates the binomial coefficient (n choose k) using iterative and recursive method.\"\n  [n k]\n  (if (or (< k 0) (> k n))\n    0\n    (let [k (min k (- n k))]\n      (loop [result 1N, i 0]\n        (if (= i k)\n          result\n          (recur\n           (/ (* result (- n i)) (inc i))\n           (inc i)))))))\n```\n:::\n\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div><pre><small><small>source: <a href=\"https://github.com/adabwana/f24-m6410-hw3/blob/master/src/assignments/hw3/utils.clj\">src/assignments/hw3/utils.clj</a></small></small></pre></div>\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":false,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"output-file":"assignments.hw3.utils.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","code-block-background":true,"toc-title-numbers":false,"number-depth":0},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","revealjs"]}