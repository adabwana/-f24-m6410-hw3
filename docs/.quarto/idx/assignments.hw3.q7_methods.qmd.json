{"title":"Q7: Two Methods","markdown":{"yaml":{"format":{"html":{"toc":true,"toc-depth":3,"theme":"cosmo","number-sections":false,"output-file":"assignments.hw3.q7_methods.html"}},"code-block-background":true,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"toc-title-numbers":false,"number-depth":0},"headingText":"Q7: Two Methods","containsRefs":false,"markdown":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw3.q7_methods_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw3.q7_methods_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw3.q7-methods\n  (:require\n   [assignments.hw3.utils :refer :all]\n   [scicloj.hanamicloth.v1.api :as haclo]\n   [tablecloth.api :as tc]))\n```\n:::\n\n\n---\n\n\n**Problem Statement:**\n\nAssume that the AI system of an electric car emits 9 errors in a trip of 3,000 miles. The errors are randomly distributed to 7 back-up circuits where one circuit may handle more than one error. If all back-up circuits receive at least one error in one trip, a warning light turns on. Find the probability that the warning light turns on during a trip of 3,000 miles.\n\nWe'll solve this using two methods:\n     \n1. Using Stirling numbers of the second kind (combinatorial approach)\n2. Using the Inclusion-Exclusion Principle (analytical approach)\n\nLet's start with a smaller example to illustrate the concepts: 4 errors distributed to 3 circuits.\n\n### Method 1: Using Stirling Numbers of the Second Kind\n\n\nThis method uses Stirling numbers of the second kind, $S(n,k)$, which count the ways to partition $n$ distinguishable objects into $k$ non-empty subsets.\n\nKey function: `stirling2`\n\nStirling numbers of the second kind\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn stirling2 [n k]\n    (cond\n      (or (= k 0) (> k n)) 0\n      (or (= k 1) (= k n)) 1\n      :else (+ (* k (stirling2 (dec n) k))\n               (stirling2 (dec n) (dec k))))))\n```\n:::\n\n\n\nFor our example (4 errors, 3 circuits):\n     \n- Total ways: $3^4 = 81$\n- Favorable ways: $3! \\times S(4,3)$\n- Probability: $\\frac{3! \\times S(4,3)}{3^4}$\n\nProbability calculation using Method 1\n\n\n::: {.sourceClojure}\n```clojure\n(defn probability-method1 [n k]\n  (let [total-ways (Math/pow k n)\n        favorable-ways (* (factorial k) (stirling2 n k))]\n    (/ favorable-ways total-ways)))\n```\n:::\n\n\nProbability for our example:\n\n\n::: {.sourceClojure}\n```clojure\n(format \"%.4f\" (probability-method1 4 3))\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n\"0.4444\"\n\n```\n:::\n\n\n### Method 2: Using the Inclusion-Exclusion Principle\n\n\nThis method systematically includes and excludes overlapping cases.\n\nKey function: `inclusion-exclusion-terms`\n\nInclusion-Exclusion terms\n\n\n::: {.sourceClojure}\n```clojure\n(defn inclusion-exclusion-terms-0dex [n k]\n  (map (fn [i]\n         (let [sign (if (even? i) 1 -1)\n               combinations (nck k i)\n               ways (Math/pow (- k i) n)]\n           (* sign combinations ways)))\n       (range 0 (inc k))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn inclusion-exclusion-terms-1dex\n  \"Calculates the terms for the inclusion-exclusion principle, corresponding to the formula:\n   \n   n: Number of items to distribute (e.g., calls)\n   k: Number of groups to distribute into (e.g., days)\n   \n   Returns a sequence of terms for the inclusion-exclusion sum.\"\n  [n k]\n  (map (fn [i]\n         (let [sign (if (odd? i) 1 -1)\n               combinations (nck k i)  \n               ways (Math/pow (- k i) n)]  \n           (* sign combinations ways)))\n       (range 1 (inc k))))\n```\n:::\n\n\n\nFor our example (4 errors, 3 circuits):\n\nCompute inclusion-exclusion terms for the example\n\n\n::: {.sourceClojure}\n```clojure\n(def terms-example-0dex\n  (map-indexed\n   (fn [i term]\n     {:i i\n      :sign (if (even? i) \"+\" \"-\")\n      :combination (nck 3 i)\n      :ways (Math/pow (- 3 i) 4)\n      :term term})\n   (inclusion-exclusion-terms-0dex 4 3)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def terms-example-1dex\n  (map-indexed\n   (fn [i term]\n     {:i (inc i)\n      :sign (if (odd? (inc i)) \"+\" \"-\")\n      :combination (nck 3 (inc i))\n      :ways (Math/pow (- 3 (inc i)) 4)\n      :term term})\n   (inclusion-exclusion-terms-1dex 4 3)))\n```\n:::\n\n\nPrint the inclusion-exclusion terms table\n\n\n::: {.sourceClojure}\n```clojure\n(into [] terms-example-0dex)\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n[{:i 0, :sign \"+\", :combination 1N, :ways 81.0, :term 81.0}\n {:i 1, :sign \"-\", :combination 3N, :ways 16.0, :term -48.0}\n {:i 2, :sign \"+\", :combination 3N, :ways 1.0, :term 3.0}\n {:i 3, :sign \"-\", :combination 1N, :ways 0.0, :term -0.0}]\n\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(into [] terms-example-1dex)\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n[{:i 1, :sign \"+\", :combination 3N, :ways 16.0, :term 48.0}\n {:i 2, :sign \"-\", :combination 3N, :ways 1.0, :term -3.0}\n {:i 3, :sign \"+\", :combination 1N, :ways 0.0, :term 0.0}]\n\n```\n:::\n\n\n\n**Explanation:**\n     \n- i: Number of circuits excluded\n- sign: Alternates between + and - based on the inclusion-exclusion principle\n- combination: Ways to choose i circuits to exclude\n- ways: Ways to distribute errors into remaining circuits\n- term: Calculated as sign × combination × ways\n\nThe sum of these terms gives us the favorable ways.\n\nProbability calculation using Method 2\n\n\n::: {.sourceClojure}\n```clojure\n(defn probability-method2 [n k]\n  (let [total-ways (Math/pow k n)\n        favorable-ways (reduce + (inclusion-exclusion-terms-0dex n k))\n        probs (/ favorable-ways total-ways)]\n    probs))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(let [n 4 k 3 \n      total-ways (Math/pow k n)\n      favorable-ways (reduce + (inclusion-exclusion-terms-0dex n k))\n      probs (/ favorable-ways total-ways)]\n  (answer\n   (str \"Probability: \" (format \"%.4f\" probs))))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Probability: 0.4444**</span>\n\n\n::: {.sourceClojure}\n```clojure\n(let [n 4 k 3 \n      total-ways (Math/pow k n)\n      favorable-ways (reduce + (inclusion-exclusion-terms-1dex n k))\n      probs (/ favorable-ways total-ways)\n      not-probs (- 1 probs)]\n  (answer\n   (str \"Probability: \" (format \"%.4f\" not-probs))))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Probability: 0.4444**</span>\n\n### Comparing Methods for Different Values of n\n\n\n::: {.sourceClojure}\n```clojure\n(def n-values (range 1 20))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def k 8)\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def probabilities\n  (map (fn [n]\n         {:n n\n          :method1 (double (probability-method1 n k))\n          :method2 (double (probability-method2 n k))})\n       n-values))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def data (tc/dataset probabilities))\n```\n:::\n\n\nPlotting the probabilities\n\n\n### Conclusion\n\nBoth methods yield the same results, but they offer different perspectives:\n\n1. **Stirling Numbers (Method 1):** \n   - Focuses on partitioning errors into non-empty circuits\n   - More intuitive for understanding the problem structure\n   - Computationally efficient for smaller values\n\n2. **Inclusion-Exclusion (Method 2):**\n   - Systematically accounts for all possible cases\n   - More generalizable to complex scenarios\n   - Can be computationally intensive for large values\n\nFor our original problem (10 errors, 8 circuits):\n\n\n::: {.sourceClojure}\n```clojure\n(format \"Probability: %.5f\" (probability-method1 9 7))\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n\"Probability: 0.05770\"\n\n```\n:::\n\n\n\nThis low probability suggests it's unlikely for all circuits to receive an error in a single trip, which is generally good for system reliability. However, in critical systems like automotive AI, even low-probability events need careful consideration.\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div><pre><small><small>source: <a href=\"https://github.com/adabwana/f24-m6410-hw3/blob/master/src/assignments/hw3/q7_methods.clj\">src/assignments/hw3/q7_methods.clj</a></small></small></pre></div>\n```\n","srcMarkdownNoYaml":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw3.q7_methods_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw3.q7_methods_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw3.q7-methods\n  (:require\n   [assignments.hw3.utils :refer :all]\n   [scicloj.hanamicloth.v1.api :as haclo]\n   [tablecloth.api :as tc]))\n```\n:::\n\n\n## Q7: Two Methods\n---\n\n\n**Problem Statement:**\n\nAssume that the AI system of an electric car emits 9 errors in a trip of 3,000 miles. The errors are randomly distributed to 7 back-up circuits where one circuit may handle more than one error. If all back-up circuits receive at least one error in one trip, a warning light turns on. Find the probability that the warning light turns on during a trip of 3,000 miles.\n\nWe'll solve this using two methods:\n     \n1. Using Stirling numbers of the second kind (combinatorial approach)\n2. Using the Inclusion-Exclusion Principle (analytical approach)\n\nLet's start with a smaller example to illustrate the concepts: 4 errors distributed to 3 circuits.\n\n### Method 1: Using Stirling Numbers of the Second Kind\n\n\nThis method uses Stirling numbers of the second kind, $S(n,k)$, which count the ways to partition $n$ distinguishable objects into $k$ non-empty subsets.\n\nKey function: `stirling2`\n\nStirling numbers of the second kind\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn stirling2 [n k]\n    (cond\n      (or (= k 0) (> k n)) 0\n      (or (= k 1) (= k n)) 1\n      :else (+ (* k (stirling2 (dec n) k))\n               (stirling2 (dec n) (dec k))))))\n```\n:::\n\n\n\nFor our example (4 errors, 3 circuits):\n     \n- Total ways: $3^4 = 81$\n- Favorable ways: $3! \\times S(4,3)$\n- Probability: $\\frac{3! \\times S(4,3)}{3^4}$\n\nProbability calculation using Method 1\n\n\n::: {.sourceClojure}\n```clojure\n(defn probability-method1 [n k]\n  (let [total-ways (Math/pow k n)\n        favorable-ways (* (factorial k) (stirling2 n k))]\n    (/ favorable-ways total-ways)))\n```\n:::\n\n\nProbability for our example:\n\n\n::: {.sourceClojure}\n```clojure\n(format \"%.4f\" (probability-method1 4 3))\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n\"0.4444\"\n\n```\n:::\n\n\n### Method 2: Using the Inclusion-Exclusion Principle\n\n\nThis method systematically includes and excludes overlapping cases.\n\nKey function: `inclusion-exclusion-terms`\n\nInclusion-Exclusion terms\n\n\n::: {.sourceClojure}\n```clojure\n(defn inclusion-exclusion-terms-0dex [n k]\n  (map (fn [i]\n         (let [sign (if (even? i) 1 -1)\n               combinations (nck k i)\n               ways (Math/pow (- k i) n)]\n           (* sign combinations ways)))\n       (range 0 (inc k))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(defn inclusion-exclusion-terms-1dex\n  \"Calculates the terms for the inclusion-exclusion principle, corresponding to the formula:\n   \n   n: Number of items to distribute (e.g., calls)\n   k: Number of groups to distribute into (e.g., days)\n   \n   Returns a sequence of terms for the inclusion-exclusion sum.\"\n  [n k]\n  (map (fn [i]\n         (let [sign (if (odd? i) 1 -1)\n               combinations (nck k i)  \n               ways (Math/pow (- k i) n)]  \n           (* sign combinations ways)))\n       (range 1 (inc k))))\n```\n:::\n\n\n\nFor our example (4 errors, 3 circuits):\n\nCompute inclusion-exclusion terms for the example\n\n\n::: {.sourceClojure}\n```clojure\n(def terms-example-0dex\n  (map-indexed\n   (fn [i term]\n     {:i i\n      :sign (if (even? i) \"+\" \"-\")\n      :combination (nck 3 i)\n      :ways (Math/pow (- 3 i) 4)\n      :term term})\n   (inclusion-exclusion-terms-0dex 4 3)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def terms-example-1dex\n  (map-indexed\n   (fn [i term]\n     {:i (inc i)\n      :sign (if (odd? (inc i)) \"+\" \"-\")\n      :combination (nck 3 (inc i))\n      :ways (Math/pow (- 3 (inc i)) 4)\n      :term term})\n   (inclusion-exclusion-terms-1dex 4 3)))\n```\n:::\n\n\nPrint the inclusion-exclusion terms table\n\n\n::: {.sourceClojure}\n```clojure\n(into [] terms-example-0dex)\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n[{:i 0, :sign \"+\", :combination 1N, :ways 81.0, :term 81.0}\n {:i 1, :sign \"-\", :combination 3N, :ways 16.0, :term -48.0}\n {:i 2, :sign \"+\", :combination 3N, :ways 1.0, :term 3.0}\n {:i 3, :sign \"-\", :combination 1N, :ways 0.0, :term -0.0}]\n\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(into [] terms-example-1dex)\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n[{:i 1, :sign \"+\", :combination 3N, :ways 16.0, :term 48.0}\n {:i 2, :sign \"-\", :combination 3N, :ways 1.0, :term -3.0}\n {:i 3, :sign \"+\", :combination 1N, :ways 0.0, :term 0.0}]\n\n```\n:::\n\n\n\n**Explanation:**\n     \n- i: Number of circuits excluded\n- sign: Alternates between + and - based on the inclusion-exclusion principle\n- combination: Ways to choose i circuits to exclude\n- ways: Ways to distribute errors into remaining circuits\n- term: Calculated as sign × combination × ways\n\nThe sum of these terms gives us the favorable ways.\n\nProbability calculation using Method 2\n\n\n::: {.sourceClojure}\n```clojure\n(defn probability-method2 [n k]\n  (let [total-ways (Math/pow k n)\n        favorable-ways (reduce + (inclusion-exclusion-terms-0dex n k))\n        probs (/ favorable-ways total-ways)]\n    probs))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(let [n 4 k 3 \n      total-ways (Math/pow k n)\n      favorable-ways (reduce + (inclusion-exclusion-terms-0dex n k))\n      probs (/ favorable-ways total-ways)]\n  (answer\n   (str \"Probability: \" (format \"%.4f\" probs))))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Probability: 0.4444**</span>\n\n\n::: {.sourceClojure}\n```clojure\n(let [n 4 k 3 \n      total-ways (Math/pow k n)\n      favorable-ways (reduce + (inclusion-exclusion-terms-1dex n k))\n      probs (/ favorable-ways total-ways)\n      not-probs (- 1 probs)]\n  (answer\n   (str \"Probability: \" (format \"%.4f\" not-probs))))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Probability: 0.4444**</span>\n\n### Comparing Methods for Different Values of n\n\n\n::: {.sourceClojure}\n```clojure\n(def n-values (range 1 20))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def k 8)\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def probabilities\n  (map (fn [n]\n         {:n n\n          :method1 (double (probability-method1 n k))\n          :method2 (double (probability-method2 n k))})\n       n-values))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(def data (tc/dataset probabilities))\n```\n:::\n\n\nPlotting the probabilities\n\n\n### Conclusion\n\nBoth methods yield the same results, but they offer different perspectives:\n\n1. **Stirling Numbers (Method 1):** \n   - Focuses on partitioning errors into non-empty circuits\n   - More intuitive for understanding the problem structure\n   - Computationally efficient for smaller values\n\n2. **Inclusion-Exclusion (Method 2):**\n   - Systematically accounts for all possible cases\n   - More generalizable to complex scenarios\n   - Can be computationally intensive for large values\n\nFor our original problem (10 errors, 8 circuits):\n\n\n::: {.sourceClojure}\n```clojure\n(format \"Probability: %.5f\" (probability-method1 9 7))\n```\n:::\n\n\n\n::: {.printedClojure}\n```clojure\n\"Probability: 0.05770\"\n\n```\n:::\n\n\n\nThis low probability suggests it's unlikely for all circuits to receive an error in a single trip, which is generally good for system reliability. However, in critical systems like automotive AI, even low-probability events need careful consideration.\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div><pre><small><small>source: <a href=\"https://github.com/adabwana/f24-m6410-hw3/blob/master/src/assignments/hw3/q7_methods.clj\">src/assignments/hw3/q7_methods.clj</a></small></small></pre></div>\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":false,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"output-file":"assignments.hw3.q7_methods.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","code-block-background":true,"toc-title-numbers":false,"number-depth":0},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","revealjs"]}