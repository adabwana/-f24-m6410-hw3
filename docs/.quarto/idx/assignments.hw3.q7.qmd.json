{"title":"Question 7","markdown":{"yaml":{"format":{"html":{"toc":true,"toc-depth":3,"theme":"cosmo","number-sections":false,"output-file":"assignments.hw3.q7.html"}},"code-block-background":true,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"toc-title-numbers":false,"number-depth":0},"headingText":"Question 7","containsRefs":false,"markdown":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw3.q7_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw3.q7_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw3.q7\n  (:require\n   [assignments.hw3.utils :refer :all]))\n```\n:::\n\n\n---\n\n#### *7) Assume that the AI (artificial intelligence) system of an electric car emits 10 errors (including pattern detection errors due to insufficient training data or operational errors) in a trip of 3,000 miles. Also assume that the errors are randomly distributed to 8 back-up circuits where one circuit may handle more than one errors. If all back-up circuits receive at least one error in one trip, a warning light the control panel automatically turns on. Find the probability that the warning light turns on during a trip of 3000 miles?*\n\nTo solve this problem, we need to find the probability that all 8 back-up circuits receive at least one error out of the 10 errors emitted. This is equivalent to finding the probability of distributing 10 distinct objects (errors) into 8 distinct boxes (circuits) such that no box is empty.\n\nThis is a classic occupancy problem, and we can solve it using the concept of Stirling numbers of the second kind and the principle of inclusion-exclusion.\n\nLet's break down the solution:\n\n1. Total number of ways to distribute 10 errors to 8 circuits: $8^{10}$\n   (Each error has 8 choices, and we make this choice 10 times)\n\n2. Number of ways to distribute 10 errors to 8 circuits with all circuits receiving at least one error:\n   \n     - This is given by the Stirling number of the second kind: $S(10,8)$\n     - We also need to account for the number of ways to arrange the 8 circuits, which is $8!$\n     - Therefore, the number of favorable outcomes is $8! * S(10,8)$\n     \n3. Probability = (Favorable outcomes) / (Total outcomes) = $8! * S(10,8) / 8^{10}$\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn factorial [n]\n    (apply * (range 1 (inc n))))\n\n  (defn stirling2 [n k]\n    (cond\n      (or (= k 0) (> k n)) 0\n      (or (= k 1) (= k n)) 1\n      :else (+ (* k (stirling2 (dec n) k))\n               (stirling2 (dec n) (dec k)))))\n\n  (defn probability-all-circuits-receive-error []\n    (let [n 10                                            ; number of errors\n          k 8                                             ; number of circuits\n          total-ways (Math/pow k n)\n          favorable-ways (* (factorial k) (stirling2 n k))]\n      (/ favorable-ways total-ways))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn probability-all-circuits-receive-error []\n    (let [n 10                                            ; number of errors\n          k 8                                             ; number of circuits\n          total-ways (Math/pow k n)\n          favorable-ways (stirling2 n k)]\n      (/ favorable-ways total-ways))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(answer (str \"The probability that the warning light turns on (all circuits receive at least one error) is approximately \"\n             (format \"%.6f\" (probability-all-circuits-receive-error))))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**The probability that the warning light turns on (all circuits receive at least one error) is approximately 0.028163**</span>\n\n**Interpretation:**\n\n1. The probability is relatively low, which makes sense given that we're trying to distribute 10 errors among 8 circuits with no empty circuits.\n2. This low probability suggests that it's quite unlikely for all circuits to receive an error in a single trip, which is good for the reliability of the system.\n3. However, even a small probability of all circuits receiving an error could be concerning for a critical system like an AI in an electric car.\n\n**Verification:**\n\nWe can verify our result using a Monte Carlo simulation:\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn simulate-error-distribution []\n    (let [circuits (vec (repeat 8 0))]\n      (reduce (fn [acc _]\n                (update acc (rand-int 8) inc))\n              circuits\n              (range 10)))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn all-circuits-have-error? [distribution]\n    (every? pos? distribution)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn monte-carlo-simulation [num-simulations]\n    (let [successes (atom 0)]\n      (doseq [_ (range num-simulations)]\n        (when (all-circuits-have-error? (simulate-error-distribution))\n          (swap! successes inc)))\n      (double (/ @successes num-simulations)))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(let [num-simulations 1000000\n      simulated-prob (monte-carlo-simulation num-simulations)]\n  (answer\n   (str \"Simulated probability after \" num-simulations \" simulations: \"\n        (format \"%.6f\" simulated-prob))))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Simulated probability after 1000000 simulations: 0.028330**</span>\n\n**Conclusion:**\n\nWe have calculated the probability of the warning light turning on in an electric car's AI system during a 3000-mile trip. This problem demonstrates the application of Stirling numbers and occupancy problems in a real-world scenario involving error distribution in complex systems.\n\nThe low probability we found suggests that it's unlikely for all circuits to receive an error in a single trip, which is generally good for system reliability. However, in critical systems like automotive AI, even low-probability events need to be carefully considered.\n\nThis type of analysis is crucial in system design and reliability engineering, especially for safety-critical applications like autonomous vehicles. It helps engineers understand the likelihood of various failure modes and design appropriate safeguards and redundancies.\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div><pre><small><small>source: <a href=\"https://github.com/adabwana/f24-m6410-hw3/blob/master/src/assignments/hw3/q7.clj\">src/assignments/hw3/q7.clj</a></small></small></pre></div>\n```\n","srcMarkdownNoYaml":"\n<style></style><style>.printedClojure .sourceCode {\n  background-color: transparent;\n  border-style: none;\n}\n</style><style>.clay-limit-image-width .clay-image {max-width: 100%}\n.clay-side-by-side .sourceCode {margin: 0}\n.clay-side-by-side {margin: 1em 0}\n</style>\n<script src=\"assignments.hw3.q7_files/md-default0.js\" type=\"text/javascript\"></script><script src=\"assignments.hw3.q7_files/md-default1.js\" type=\"text/javascript\"></script>\n\n::: {.sourceClojure}\n```clojure\n(ns assignments.hw3.q7\n  (:require\n   [assignments.hw3.utils :refer :all]))\n```\n:::\n\n\n## Question 7\n---\n\n#### *7) Assume that the AI (artificial intelligence) system of an electric car emits 10 errors (including pattern detection errors due to insufficient training data or operational errors) in a trip of 3,000 miles. Also assume that the errors are randomly distributed to 8 back-up circuits where one circuit may handle more than one errors. If all back-up circuits receive at least one error in one trip, a warning light the control panel automatically turns on. Find the probability that the warning light turns on during a trip of 3000 miles?*\n\nTo solve this problem, we need to find the probability that all 8 back-up circuits receive at least one error out of the 10 errors emitted. This is equivalent to finding the probability of distributing 10 distinct objects (errors) into 8 distinct boxes (circuits) such that no box is empty.\n\nThis is a classic occupancy problem, and we can solve it using the concept of Stirling numbers of the second kind and the principle of inclusion-exclusion.\n\nLet's break down the solution:\n\n1. Total number of ways to distribute 10 errors to 8 circuits: $8^{10}$\n   (Each error has 8 choices, and we make this choice 10 times)\n\n2. Number of ways to distribute 10 errors to 8 circuits with all circuits receiving at least one error:\n   \n     - This is given by the Stirling number of the second kind: $S(10,8)$\n     - We also need to account for the number of ways to arrange the 8 circuits, which is $8!$\n     - Therefore, the number of favorable outcomes is $8! * S(10,8)$\n     \n3. Probability = (Favorable outcomes) / (Total outcomes) = $8! * S(10,8) / 8^{10}$\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn factorial [n]\n    (apply * (range 1 (inc n))))\n\n  (defn stirling2 [n k]\n    (cond\n      (or (= k 0) (> k n)) 0\n      (or (= k 1) (= k n)) 1\n      :else (+ (* k (stirling2 (dec n) k))\n               (stirling2 (dec n) (dec k)))))\n\n  (defn probability-all-circuits-receive-error []\n    (let [n 10                                            ; number of errors\n          k 8                                             ; number of circuits\n          total-ways (Math/pow k n)\n          favorable-ways (* (factorial k) (stirling2 n k))]\n      (/ favorable-ways total-ways))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn probability-all-circuits-receive-error []\n    (let [n 10                                            ; number of errors\n          k 8                                             ; number of circuits\n          total-ways (Math/pow k n)\n          favorable-ways (stirling2 n k)]\n      (/ favorable-ways total-ways))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(answer (str \"The probability that the warning light turns on (all circuits receive at least one error) is approximately \"\n             (format \"%.6f\" (probability-all-circuits-receive-error))))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**The probability that the warning light turns on (all circuits receive at least one error) is approximately 0.028163**</span>\n\n**Interpretation:**\n\n1. The probability is relatively low, which makes sense given that we're trying to distribute 10 errors among 8 circuits with no empty circuits.\n2. This low probability suggests that it's quite unlikely for all circuits to receive an error in a single trip, which is good for the reliability of the system.\n3. However, even a small probability of all circuits receiving an error could be concerning for a critical system like an AI in an electric car.\n\n**Verification:**\n\nWe can verify our result using a Monte Carlo simulation:\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn simulate-error-distribution []\n    (let [circuits (vec (repeat 8 0))]\n      (reduce (fn [acc _]\n                (update acc (rand-int 8) inc))\n              circuits\n              (range 10)))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn all-circuits-have-error? [distribution]\n    (every? pos? distribution)))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(comment\n  (defn monte-carlo-simulation [num-simulations]\n    (let [successes (atom 0)]\n      (doseq [_ (range num-simulations)]\n        (when (all-circuits-have-error? (simulate-error-distribution))\n          (swap! successes inc)))\n      (double (/ @successes num-simulations)))))\n```\n:::\n\n\n\n::: {.sourceClojure}\n```clojure\n(let [num-simulations 1000000\n      simulated-prob (monte-carlo-simulation num-simulations)]\n  (answer\n   (str \"Simulated probability after \" num-simulations \" simulations: \"\n        (format \"%.6f\" simulated-prob))))\n```\n:::\n\n\n> <span style=\"color: black; font-size: 1.5em;\">**Simulated probability after 1000000 simulations: 0.028330**</span>\n\n**Conclusion:**\n\nWe have calculated the probability of the warning light turning on in an electric car's AI system during a 3000-mile trip. This problem demonstrates the application of Stirling numbers and occupancy problems in a real-world scenario involving error distribution in complex systems.\n\nThe low probability we found suggests that it's unlikely for all circuits to receive an error in a single trip, which is generally good for system reliability. However, in critical systems like automotive AI, even low-probability events need to be carefully considered.\n\nThis type of analysis is crucial in system design and reliability engineering, especially for safety-critical applications like autonomous vehicles. It helps engineers understand the likelihood of various failure modes and design appropriate safeguards and redundancies.\n\n\n```{=html}\n<div style=\"background-color:grey;height:2px;width:100%;\"></div>\n```\n\n\n\n```{=html}\n<div><pre><small><small>source: <a href=\"https://github.com/adabwana/f24-m6410-hw3/blob/master/src/assignments/hw3/q7.clj\">src/assignments/hw3/q7.clj</a></small></small></pre></div>\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":false,"include-in-header":{"text":"<link rel = \"icon\" href = \"data:,\" />"},"output-file":"assignments.hw3.q7.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","code-block-background":true,"toc-title-numbers":false,"number-depth":0},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","revealjs"]}